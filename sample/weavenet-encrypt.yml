root@tokyo:/home/aducastel/bench# ./setup.sh weavenet-encrypt
2020-06-04 21:05:08 INFO Starting deployment of k8s with plugin weavenet-encrypt
2020-06-04 21:05:08 INFO ( MASTER = s04 and MINIONS = s02 s03 )
2020-06-04 21:05:08 INFO Waiting for nodes to be ready
2020-06-04 21:05:11 INFO Deploying nodes with Ubuntu bionic
2020-06-04 21:05:19 INFO Waiting for nodes to be deployed
2020-06-04 21:19:16 INFO Waiting for SSH access
2020-06-04 21:19:25 INFO Preparing nodes
2020-06-04 21:19:25 INFO Node s04 start
2020-06-04 21:19:25 INFO Node s02 start
2020-06-04 21:19:25 INFO Node s03 start
2020-06-04 21:23:49 INFO Node s03 end
2020-06-04 21:24:12 INFO Node s02 end
2020-06-04 21:24:22 INFO Node s04 end
2020-06-04 21:24:22 INFO Downloading 10G.dat on
2020-06-04 21:24:46 INFO Deploying master
Warning: Permanently added '10.1.1.4' (ECDSA) to the list of known hosts.
[init] Using Kubernetes version: v1.18.3
W0604 21:24:47.455009    5256 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
[preflight] Running pre-flight checks
	[WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [s04 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.1.1.4]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [s04 localhost] and IPs [10.1.1.4 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [s04 localhost] and IPs [10.1.1.4 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
W0604 21:28:00.425880    5256 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "Node,RBAC"
[control-plane] Creating static Pod manifest for "kube-scheduler"
W0604 21:28:00.426969    5256 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "Node,RBAC"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 28.502195 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.18" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node s04 as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node s04 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: m5iabv.ouy29soeaoxcpspb
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.1.1.4:6443 --token m5iabv.ouy29soeaoxcpspb \
    --discovery-token-ca-cert-hash sha256:af612f6d0cb0b5d695e43150024e5126957a9e270eef4c05c7bbc49553807b29
2020-06-04 21:28:30 INFO Generating join command
2020-06-04 21:28:31 INFO Retrieving kubeconfig
2020-06-04 21:28:42 INFO Joining nodes
2020-06-04 21:29:11 INFO Installing CNI weavenet-encrypt
2020-06-04 21:29:12 INFO Waiting for nodes to be ready
2020-06-04 21:30:32 INFO Cluster is now ready with network CNI weavenet-encrypt
root@tokyo:/home/aducastel/bench# ./bench.sh
2020-06-04 21:30:48 INFO Waiting for systems to be idle ...
2020-06-04 21:31:48 INFO Getting idle consumption (1min poll)
2020-06-04 21:32:49 INFO Starting iperf3 server
2020-06-04 21:32:49 INFO Waiting for pod to be alive
2020-06-04 21:32:55 INFO Server iperf3 is listening on 10.32.0.2
2020-06-04 21:32:55 INFO Launching benchmark for TCP
2020-06-04 21:35:13 INFO TCP 1/3 : 896 Mbit/s
2020-06-04 21:37:28 INFO TCP 2/3 : 896 Mbit/s
2020-06-04 21:39:44 INFO TCP 3/3 : 896 Mbit/s
2020-06-04 21:39:45 INFO TCP result 896 Mbit/s
2020-06-04 21:39:45 INFO Launching benchmark for UDP
2020-06-04 21:42:01 INFO UDP 1/3 : 292 Mbit/s 2892us jitter 91% drop
2020-06-04 21:44:17 INFO UDP 2/3 : 302 Mbit/s 42us jitter 88% drop
2020-06-04 21:46:32 INFO UDP 3/3 : 308 Mbit/s 94us jitter 85% drop
2020-06-04 21:46:33 INFO UDP result 300 Mbit/s 1009us jitter 88% drop
2020-06-04 21:46:33 INFO Cleaning resources
2020-06-04 21:46:40 INFO Starting HTTP server
2020-06-04 21:46:40 INFO Waiting for pod to be alive
2020-06-04 21:46:47 INFO Server HTTP is listening on 10.32.0.2
2020-06-04 21:46:47 INFO Launching benchmark for HTTP
2020-06-04 21:48:12 INFO HTTP 1/3 : 979 Mbit/s
2020-06-04 21:49:57 INFO HTTP 2/3 : 397 Mbit/s
2020-06-04 21:52:15 INFO HTTP 3/3 : 548 Mbit/s
2020-06-04 21:52:16 INFO HTTP result 641 Mbit/s
2020-06-04 21:52:16 INFO Cleaning resources
2020-06-04 21:52:20 INFO Starting FTP server
2020-06-04 21:52:20 INFO Waiting for pod to be alive
2020-06-04 21:52:33 INFO Server FTP is listening on 10.32.0.2
2020-06-04 21:52:33 INFO Launching benchmark for FTP with 3 cycles
2020-06-04 21:54:02 INFO FTP 1/3 : 930 Mbit/s
2020-06-04 21:55:29 INFO FTP 2/3 : 957 Mbit/s
2020-06-04 21:56:58 INFO FTP 3/3 : 930 Mbit/s
2020-06-04 21:56:59 INFO FTP result 939 Mbit/s
2020-06-04 21:56:59 INFO Cleaning resources
2020-06-04 21:57:10 INFO Starting SCP server
2020-06-04 21:57:10 INFO Waiting for pod to be alive
2020-06-04 21:57:21 INFO Server SCP is listening on 10.32.0.2
2020-06-04 21:57:21 INFO Launching benchmark for SCP with 3 cycles
2020-06-04 21:59:33 INFO SCP 1/3 : 623 Mbit/s
2020-06-04 22:01:46 INFO SCP 2/3 : 628 Mbit/s
2020-06-04 22:03:58 INFO SCP 3/3 : 633 Mbit/s
2020-06-04 22:03:59 INFO SCP result 628 Mbit/s
2020-06-04 22:03:59 INFO Cleaning resources
=========================================================================
SUMMARY: 	525	=0.22+0.00+0.20+0.00+0.00	507	=0.45+0.01+0.29+0.00+0.00	896	541	=0.35+0.00+5.69+0.05+0.00	522	=0.54+0.00+13.07+0.00+0.00	300	1009	88	549	=1.31+0.00+11.65+0.01+0.00	530	=1.14+0.01+13.06+0.00+0.00	641	554	=0.67+0.00+8.83+0.02+0.00	526	=0.41+0.00+13.11+0.03+0.00	939	556	=0.76+0.00+10.09+0.02+0.00	539	=0.42+0.00+14.23+0.00+0.00	628	561	=4.33+0.00+9.09+0.82+0.00	541	=3.73+0.01+13.11+0.00+0.00
=========================================================================
root@tokyo:/home/aducastel/bench# ./features.sh
Initializing
namespace/netpol created
networkpolicy.networking.k8s.io/test-ingress created
networkpolicy.networking.k8s.io/test-egress created
Retrieving MTU
Starting ingress/egress tests
ING SUCCESS: 'Authorized' client 'can' access protected server
ING SUCCESS: 'Unauthorized' client 'cannot' access protected server
INGRESS = yes
EG SUCCESS: Protected client 'can' access 'authorized' server
EG SUCCESS: Protected client 'cannot' access 'unauthorized' server
Cleaning
namespace "netpol" deleted
Result :
MTU : 1376
Ingress : yes	 Egress : yes
root@tokyo:/home/aducastel/bench# ./clean.sh
